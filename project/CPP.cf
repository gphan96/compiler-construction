PDefs.   Program  ::= [Def] ;

---------------------- Def rules --------------------------------

DFun.     Def   ::= FPre Type Id "(" [Arg] ")" FunBlock ;
DUsing.   Def   ::= "using" Type ";" ;
DTypedef. Def   ::= "typedef" Type Id ";" ;

terminator Def "" ;

rules FPre  ::= "inline" | "" ;

rules FunBlock ::= "{" [Stm] "}" | ";" ;

---------------------- Arg rules --------------------------------

ADecl.   Arg   ::= APre Type Rest ;

separator Arg "," ;

rules APre  ::= "const" | "" ;
rules Rest  ::= Post Var | Post ;
rules Post  ::= "&" | "";

---------------------- Stm rules --------------------------------

SExp.       Stm   ::= Exp ";" ;
SDecl1.     Stm   ::= Type [Var] ";" ;
SDecl2.     Stm   ::= "const" Type Post [Var] ";" ;
SDecl3.     Stm   ::= SPre Type Id "=" Exp ";" ;
SReturn.    Stm   ::= "return" Exp ";" ;
SReturnV.   Stm   ::= "return" ";" ;
SWhile.     Stm   ::= "while" "(" Exp ")" Stm ;
SBlock.     Stm   ::= "{" [Stm] "}" ;
SIfElse.    Stm   ::= "if" "(" Exp ")" Stm Else;
STypedef.   Stm   ::= "typedef" Type Id ";" ;

terminator Stm "" ;

rules Var   ::= Id | Id "=" Exp ;

separator nonempty Var "," ;

rules SPre  ::= "constinit" APre ;

rules Else  ::= "else" Stm | "" ;

---------------------- Exp rules -------------------------------

--// Literal
ETrue.      Exp15  ::= "true" ;
EFalse.     Exp15  ::= "false" ;
EInt.       Exp15  ::= Integer ;
EDouble.    Exp15  ::= Double ;
EChar.      Exp15  ::= Char ;
EString.    Exp15  ::= [String] ;

separator nonempty String "";


--// Qualified constants
EConst.     Exp15  ::= [Id] ;

--// Indexing and Function call
EIndex.     Exp15  ::= Id "[" Exp "]" ;
EApp.       Exp15  ::= Id "(" [Exp] ")" ;                        

--// Structure projection
EProj1.     Exp14  ::= Exp14 "."  Exp15 ;
EProj2.     Exp14  ::= Exp14 "->" Exp15 ;

--// In/Decrement, Dereferencing and Negation
ELIncr.     Exp14  ::= Exp15 "++" ;
ELDecr.     Exp14  ::= Exp15 "--" ;

ERIncr.     Exp13  ::= "++" Exp14 ;
ERDecr.     Exp13  ::= "--" Exp14 ;
ENeg.       Exp13  ::= "!"  Exp14 ;
EDeref.     Exp13  ::= "*"  Exp14 ;

--// Arithmetic operations
EMod.       Exp12  ::= Exp12 "%" Exp13 ;
ETimes.     Exp12  ::= Exp12 "*" Exp13 ;
EDiv.       Exp12  ::= Exp12 "/" Exp13 ;
EPlus.      Exp11  ::= Exp11 "+" Exp12 ;
EMinus.     Exp11  ::= Exp11 "-" Exp12 ;

--// Left and Right shift
ELShift.    Exp10  ::= Exp10 "<<" Exp11 ;
ERShift.    Exp10  ::= Exp10 ">>" Exp11 ;

--// Comparison and Logical operations
ELt.        Exp9   ::= Exp9  "<"   Exp10 ;
EGt.        Exp9   ::= Exp9  ">"   Exp10 ;
ELtEq.      Exp9   ::= Exp9  "<="  Exp10 ;
EGtEq.      Exp9   ::= Exp9  ">="  Exp10 ;
EEq.        Exp8   ::= Exp8  "=="  Exp9 ;
ENEq.       Exp8   ::= Exp8  "!="  Exp9 ;
EAnd.       Exp4   ::= Exp4  "&&"  Exp5 ;
EOr.        Exp3   ::= Exp3  "||"  Exp4 ;

--// Assignment
EAssPlus.   Exp2   ::= Exp3 "+=" Exp2 ;
EAssMinus.  Exp2   ::= Exp3 "-=" Exp2 ;
EAss.       Exp2   ::= Exp3 "="  Exp2 ;

--// Condition and Exception
ECond.      Exp2   ::= Exp3 "?" Exp ":" Exp2 ;
EThrow.     Exp    ::= "throw" Exp2 ;

internal ETyped. Exp15 ::= "(" Exp ":" Type ")" ;

coercions Exp 15 ;

separator Exp "," ;

---------------------- Type rules -------------------------------

rules Type  ::= "bool" | "int" | "double" | "void" | "char" | [Id] ;

separator nonempty Type "," ;

---------------------- Id rules ---------------------------------

separator nonempty Id "::" ;

token Id (letter (letter | digit | '_')*) ;

comment "#" ;
comment "//" ;
comment "/*" "*/" ;
