PDefs.   Program  ::= [Def] ;

---------------------- Def rules ------------------------------

DFun1.      Def   ::= "inline" TypeRef Id FunBlock ;
DFun2.      Def   ::= TypeRef Id FunBlock ;
DDecl.      Def   ::= Var ";" ;
DUsing.     Def   ::= "using" [List] ";" ;
DTypedef.   Def   ::= Typedef ;
DStruct.    Def   ::= Struct ;

terminator Def "" ;

rules FunBlock ::= "(" [Arg] ")" "{" [Stm] "}" | "(" [Arg] ")" ";" ;

---------------------- Typedef and Struct -----------------------

rules Typedef  ::= "typedef" Type Id ";" ;
rules Struct   ::= "struct" Id "{" [Field] "}" ";" ;

rules Field ::= Type Id ";" ;
terminator Field "" ;

---------------------- Arg rules -------------------------------

ADecl1.   Arg   ::= Const TypeRef IdIn ;
ADecl2.   Arg   ::= Const TypeRef ;
 
separator Arg "," ;

---------------------- Var rules -------------------------------

rules IdIn  ::= Id | Id "=" Exp ;

separator nonempty IdIn "," ;

rules Const  ::= "const" | "" ;

VDecl1.  Var   ::= TypeRef [IdIn] ;
VDecl2.  Var   ::= "const" TypeRef [IdIn] ;
VDecl3.  Var   ::= "constinit" Const TypeRef [IdIn] ;
VDecl4.  Var   ::= "const" "constinit" TypeRef [IdIn] ;

---------------------- Stm rules -------------------------------

SExp.       Stm   ::= Exp ";" ;
SDecl.      Stm   ::= Var ";" ;
SReturn.    Stm   ::= "return" Exp ";" ;
SReturnV.   Stm   ::= "return" ";" ;
SWhile.     Stm   ::= "while" "(" Exp ")" Stm ;
SDoWhile.   Stm   ::= "do" Stm "while" "(" Exp ")" ";" ;
SFor.       Stm   ::= "for" "(" Var ";" Exp ";" Exp ")" Stm ;
SBlock.     Stm   ::= "{" [Stm] "}" ;
SIf.        Stm   ::= "if" "(" Exp ")" Stm ;
SIfElse.    Stm   ::= "if" "(" Exp ")" Stm "else" Stm ;
STypedef.   Stm   ::= Typedef ;
SStruct.    Stm   ::= Struct ;

terminator Stm "" ;

--rules Else  ::= "else" Stm | "" ;

---------------------- Exp rules -------------------------------

--// Literal
ETrue.      Exp15  ::= "true" ;
EFalse.     Exp15  ::= "false" ;
EInt.       Exp15  ::= Integer ;
EDouble.    Exp15  ::= Double ;
EChar.      Exp15  ::= Char ;
EString.    Exp15  ::= [String] ;

--// Qualified constants
EConst.     Exp15  ::= [List] ;

--// Indexing and Function call
EIndex.     Exp15  ::= Exp15 "[" Exp "]" ;
EApp.       Exp15  ::= Exp15 "(" [Exp] ")" ;                        

--// Structure projection
EProj1.     Exp14  ::= Exp14 "."  Exp15 ;
EProj2.     Exp14  ::= Exp14 "->" Exp15 ;

--// In/Decrement, Dereferencing and Negation
ELIncr.     Exp14  ::= Exp14 "++" ;
ELDecr.     Exp14  ::= Exp14 "--" ;

ERIncr.     Exp13  ::= "++" Exp13 ;
ERDecr.     Exp13  ::= "--" Exp13 ;
ENeg.       Exp13  ::= "!"  Exp13 ;
EDeref.     Exp13  ::= "*"  Exp13 ;
EUPlus.     Exp13  ::= "+"  Exp13 ;
EUMinus.    Exp13  ::= "-"  Exp13 ;

--// Arithmetic operations
EMod.       Exp12  ::= Exp12 "%" Exp13 ;
ETimes.     Exp12  ::= Exp12 "*" Exp13 ;
EDiv.       Exp12  ::= Exp12 "/" Exp13 ;
EPlus.      Exp11  ::= Exp11 "+" Exp12 ;
EMinus.     Exp11  ::= Exp11 "-" Exp12 ;

--// Left and Right shift
ELShift.    Exp10  ::= Exp10 "<<" Exp11 ;
ERShift.    Exp10  ::= Exp10 ">>" Exp11 ;

--// Comparison and Logical operations
ETwc.       Exp9   ::= Exp9 "<=>" Exp10 ;
ELt.        Exp9   ::= Exp9 "<"   Exp10 ;
EGt.        Exp9   ::= Exp9 ">"   Exp10 ;
ELtEq.      Exp9   ::= Exp9 "<="  Exp10 ;
EGtEq.      Exp9   ::= Exp9 ">="  Exp10 ;
EEq.        Exp8   ::= Exp8 "=="  Exp9 ;
ENEq.       Exp8   ::= Exp8 "!="  Exp9 ;
EAnd.       Exp4   ::= Exp4 "&&"  Exp5 ;
EOr.        Exp3   ::= Exp3 "||"  Exp4 ;

--// Assignment
EAssPlus.   Exp2   ::= Exp3 "+=" Exp2 ;
EAssMinus.  Exp2   ::= Exp3 "-=" Exp2 ;
EAss.       Exp2   ::= Exp3 "="  Exp2 ;

--// Condition and Exception
ECond.      Exp2   ::= Exp4 "?" Exp3 ":" Exp2 ;
EThrow.     Exp    ::= "throw" Exp ;

--internal ETyped. Exp15 ::= "(" Exp ":" Type ")" ;

coercions Exp 15 ;

separator Exp "," ;

separator nonempty String "" ;

rules List  ::= Id "<" [Type] ">" | Id ;

separator nonempty List "::" ;

---------------------- Type rules -------------------------------

rules Type  ::= "bool" | "int" | "double" | "void" | "char" | [List] ;

separator nonempty Type "," ;

rules TypeRef ::= Type | Type "&" ;

---------------------- Id rules -------------------------------

token Id (letter (letter | digit | '_')*) ;

comment "#" ;
comment "//" ;
comment "/*" "*/" ;
